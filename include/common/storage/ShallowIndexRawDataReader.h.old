// -*- c++ -*-

#ifndef __SHALLOW_INDEX_RAW_DATA_READER_H__
#define __SHALLOW_INDEX_RAW_DATA_READER_H__

// tools
#include "tools/ToolsConfig.h"
#include "tools/AutoPtr.h"

// storage
#include "storage/DataReader.h"

/// \addtogroup Storage
/// @{

/** RawDataReader that understands 'shallow' indices.
 *  <p>
 *  As long as a 'shallow' index is hit, this reader keeps drilling down
 *  to the first 'full' index, and then uses a RawDataReader to get the
 *  samples.
 */
class ShallowIndexRawDataReader : public DataReader {

public:

  /** Constructor */
  ShallowIndexRawDataReader(IndexPtr index);
    
  /** Destructor */
  virtual ~ShallowIndexRawDataReader();
    
  /** Returns a sample of the specified channel */
  virtual const RawValue::Data* find(const std::string& channel_name,
                                     const epicsTime* start);
    
  /** Returns the channel name */
  virtual const std::string& getName() const;
   
  /** Returns the next sample */ 
  virtual const RawValue::Data* next();
    
  /** Returns the current sample */
  virtual const RawValue::Data *get() const;
    
  /** @return type */
  virtual DbrType getType() const;
    
  /** @return count */   
  virtual DbrCount getCount() const;
    
  /** @return info */     
  virtual const CtrlInfo& getInfo() const;
    
  /** Checks if type changed */
  virtual bool changedType();
   
  /** Checks if info changed */ 
  virtual bool changedInfo();

private:

    /** Top-most index; where the search starts */
    IndexPtr top_index;
    
    /** Channel found in top_index */
    AutoPtr<Index::Result> top_result;
      
    /** Current data block from top_result */
    AutoPtr<RTree::Datablock> top_datablock;
    
    /** The sub index.
     *  Used iteratively while following the chain of sub indices.
     *  In the end, this is the bottom-most index, the one
     *  that points to the actual data.
     */
    AutoPtr<Index> sub_index;

    /** Channel found in sub_index. */
    AutoPtr<Index::Result> sub_result;
    
    /** Data block from DataFile received via sub_result. */
    AutoPtr<RTree::Datablock> sub_datablock;
    
    /** The reader for the actual 'full' index that we might have
     *  found under the 'shallow' index.
     */
    AutoPtr<DataReader> reader;

    /** Find channel_name and start data,
     *  if necessary recursively going down,
     *  beginning with index/result/datablock.
     */
    const RawValue::Data *find(Index &index,
                               AutoPtr<Index::Result> &index_result,
                               AutoPtr<RTree::Datablock> &datablock,
                               const stdString &channel_name,
                               const epicsTime *start);
};

/// @}

#endif
